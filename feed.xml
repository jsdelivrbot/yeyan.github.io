<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ye&#39;s Programming Caf√©</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 25 Sep 2015 21:37:06 +0930</pubDate>
    <lastBuildDate>Fri, 25 Sep 2015 21:37:06 +0930</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Longest Common Subsequence</title>
        <description>&lt;p&gt;Implementing longest common subsequence (LCS) in Haskell according to its mathematical definition is very simple.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;lcs [] []               = []
lcs _  []               = []
lcs [] _                = []
lcs aa@(a:as) bb@(b:bs) =
    if a == b
        then a : lcs as bs
        else 
            let p1 = lcs aa bs
                p2 = lcs as bb
            in
                if length p1 &amp;gt; length p2
                    then p1
                    else p2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But the performance of this recursive algorithm is absolutely horrible.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;*Main&amp;gt; lcs &amp;quot;star wars the clone&amp;quot; &amp;quot;star.wars.the.clone&amp;quot;
&amp;quot;starwarstheclone&amp;quot;
(15.17 secs, 5,888,228,928 bytes)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To improve the performance we have to record our temporary results in a matrix.
Therefore we don&amp;#39;t have to waste time on those results that we have already calculated.&lt;/p&gt;

&lt;p&gt;In comparison phrase the matrix is presented as a mutable 2 dimension array as copying array is a pretty expensive operation.
Once we finished the calculation we copied it into a immutable array, therefore we can use it in pure code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import Data.Array
import Data.Array.IO

lcs lhs rhs = do
    let la = length lhs
        lb = length rhs
        as = array (1, la) $ zip [1..] lhs
        bs = array (1, lb) $ zip [1..] rhs
    cs &amp;lt;- newArray ((0, 0), (la, lb)) 0 :: IO (IOArray (Int, Int) Int)
    forM_ [1 .. la] $ \x -&amp;gt; do
        forM_ [1 .. lb] $ \y -&amp;gt; do
            let a = as ! x
                b = bs ! y
            if a == b
                then do
                    t &amp;lt;- readArray cs (x - 1, y -1)
                    writeArray cs (x, y) (t + 1)
                else do
                    t1 &amp;lt;- readArray cs (x, y - 1)
                    t2 &amp;lt;- readArray cs (x - 1, y)
                    writeArray cs (x, y) $ max t1 t2
    rlt &amp;lt;- freeze cs :: IO (Array (Int, Int) Int)
    return $ backtrace rlt as bs la lb

backtrace cs as bs i j
    | i == 0 || j == 0 = &amp;quot;&amp;quot;
    | otherwise        =
        let i&amp;#39; = i - 1 :: Int
            j&amp;#39; = j - 1 :: Int
            ca = as ! i
            cb = bs ! j
        in if ca == cb
                then backtrace cs as bs i&amp;#39; j&amp;#39; ++ [ca]
                else if  cs ! (i, j&amp;#39;) &amp;gt; cs ! (i&amp;#39;, j)
                        then backtrace cs as bs i j&amp;#39;
                        else backtrace cs as bs i&amp;#39; j
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although the code is longer but it is 1571 times faster than the recursive one.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;*Main&amp;gt; lcs &amp;quot;star war the clone&amp;quot; &amp;quot;star.war.the.clone&amp;quot;
&amp;quot;starwartheclone&amp;quot;
(0.01 secs, 0 bytes)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sat, 26 Sep 2015 04:35:50 +0930</pubDate>
        <link>http://yourdomain.com/haskell/2015/09/26/Fuzzy-Move.html</link>
        <guid isPermaLink="true">http://yourdomain.com/haskell/2015/09/26/Fuzzy-Move.html</guid>
        
        
        <category>haskell</category>
        
      </item>
    
      <item>
        <title>Gulp Proxy Setup</title>
        <description>&lt;p&gt;Theoretically web browser should allow cross-origin resource sharing (CORS), 
if Access-Control-Allow-Origin header is presented on web server&amp;#39;s response headers. 
The problem is not every browser honor this setting.
At least Google Chrome 44.0.2403.107 under Linux does not response to HTTP header &amp;#39;Access-Control-Allow-Origin: *&amp;#39; at all.&lt;/p&gt;

&lt;p&gt;The best solution would be embed a proxy on web server. 
Delegate all cross domain resources through a specific endpoint (e.g. /proxy).
With Gulp we can easily setup an dummy server with proxy support and benefits from the live-reload.&lt;/p&gt;

&lt;p&gt;Here is an example of proxy through Alfresco&amp;#39;s RESTful API.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp-connect&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;proxy-middleware&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;connect&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Assume Alfresco runs on local host&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proxyOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://localhost:8080/alfresco/service/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;proxyOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/api&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;proxyOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;livereload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;connect&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Thu, 10 Sep 2015 06:04:02 +0930</pubDate>
        <link>http://yourdomain.com/gulp/javascript/2015/09/10/Gulp-Proxy.html</link>
        <guid isPermaLink="true">http://yourdomain.com/gulp/javascript/2015/09/10/Gulp-Proxy.html</guid>
        
        
        <category>gulp</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>XMonad Physical Screen Setup</title>
        <description>&lt;p&gt;When use xmonad with multi monitors. We can spawn a xrandr process during xmonad startup to configure the monitors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hint:&lt;/em&gt;&lt;/strong&gt; You may use arandr to generate xrandr options&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;c1&quot;&gt;-- Setup physical monitors&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;setupMonitors&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countMonitors&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;-- only applies when external monitors are available&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intersperse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;xrandr&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--output HDMI1&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--mode 1920x1080&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--pos 0x0&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--rotate normal&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--output LVDS1&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--off&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--output VIRTUAL1&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--off &amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--output DP1&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--off &amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--output VGA1&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--mode 1920x1080&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--pos 1920x0&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;--rotate normal&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- count physical monitors by count how my lines of &amp;quot;connected&amp;quot; in xrandr standard output&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;countMonitors&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;&amp;lt;-&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;createProcess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;xrandr&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;-q&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;DISPLAY&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;:0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std_out&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CreatePipe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isInfixOf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; connected&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hGetContents&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Tue, 01 Sep 2015 19:55:51 +0930</pubDate>
        <link>http://yourdomain.com/xmonad/xrandr/2015/09/01/XMonad-Physical-Screen.html</link>
        <guid isPermaLink="true">http://yourdomain.com/xmonad/xrandr/2015/09/01/XMonad-Physical-Screen.html</guid>
        
        
        <category>xmonad</category>
        
        <category>xrandr</category>
        
      </item>
    
      <item>
        <title>Generate a Jekyll Archive Index</title>
        <description>&lt;p&gt;Jekyll does not provide archive function out of the box.
There are some solution solve this problem by creating a separate archive page,
but I really like a archive side bar on the index page (like the one on this site).&lt;/p&gt;

&lt;p&gt;After spend some time on Jekyll&amp;#39;s documentation. 
I found this is actually pretty easy to achieve by implementing a custom plugin. &lt;/p&gt;

&lt;p&gt;First we need create a ruby file under &lt;code&gt;_plugins&lt;/code&gt; with the following content.
The name of the file does not matter as long as it suffixes with &lt;code&gt;rb&lt;/code&gt; it will be loaded on Jekyll start up.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;module Jekyll

  module ArchiveIndexFilter
    def to_archive(input, format) 
        # posts will be grouped by specified format (eg. month-year)
        input.group_by{ |a| a.date.strftime(format) }
    end
  end

end

Liquid::Template.register_filter(Jekyll::ArchiveIndexFilter)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can use the filter we just created. If you like the archive index bar in this site, here is the HTML snippet:&lt;/p&gt;

&lt;p&gt;Hint: &lt;strong&gt;&lt;em&gt;Jekyll needs a restart to load the Ruby code&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;div class=&amp;quot;panel panel-default&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;panel-heading&amp;quot;&amp;gt;Archive&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;panel-body&amp;quot;&amp;gt;
        {% assign archive = site.posts | to_archive:&amp;#39;%b %Y&amp;#39; %}

        &amp;lt;ul class=&amp;quot;nav&amp;quot;&amp;gt;
            {% for archive_entry in archive %}
            &amp;lt;li class=&amp;quot;archive-entry&amp;quot;&amp;gt;
                &amp;lt;a href=&amp;quot;javascript:void(0)&amp;quot;&amp;gt;{{ archive_entry[0] }} &amp;lt;span class=&amp;quot;badge pull-right&amp;quot;&amp;gt;{{ archive_entry[1] | size }}&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;
                &amp;lt;ul&amp;gt;
                    {% for post in archive_entry[1] %}
                    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ post.url }}&amp;quot;&amp;gt;{{ post.title }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                    {% endfor %}
                &amp;lt;/ul&amp;gt;
            &amp;lt;/li&amp;gt;
            {% endfor %}
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Mon, 31 Aug 2015 01:24:53 +0930</pubDate>
        <link>http://yourdomain.com/jekyll/2015/08/31/Jekyll-Archive.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/2015/08/31/Jekyll-Archive.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
